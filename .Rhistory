# DEG_fit_cm_eBayesfit = eBayes(DEG_fit,trend = FALSE,robust = FALSE)
# DEG_top = topTable(DEG_fit_cm_eBayesfit, coef = "TimePRE",adjust.method="fdr", number=Inf)
DEG_top
write.csv(DEG_top,"./Reports/DEG_LmPiD_RNA_PDXmid_v_PDXpre.csv")
thresh_Pval = 0.05
thresh_FC = 0
tmp = DEG_top[intersect(which(DEG_top$P.Value <= thresh_Pval),which(abs(DEG_top$logFC) >= thresh_FC)),]
up = as.integer(length(which(tmp$logFC > 0)))
down =  as.integer(length(which(tmp$logFC <= 0)))
print(paste("Total DEG: ", up+down))
print(paste("Sigificantly up-reglated genes: ", up))
print(paste("Sigificantly down-reglated genes: ", down))
rm("tmp","up","down")
#Volcano plot of DEG
fig <- plot_ly(data = DEG_top, x = ~logFC, y = ~-1*log10(P.Value),color = ~logFC, colors="RdBu")%>%
layout(xaxis = list(title = "DeltaZ"),yaxis = list(title = "-log(p-value)"),
shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(DEG_top))
plotly::export(p=fig,file = "Reports/DEG_LmPID_RNA_PDXmid_v_PDXpre.png")
fig
library("pathfindR")
library("visNetwork")
pfR_input = DEG_top[,c("logFC","P.Value"),]
Gene_symbol = row.names(pfR_input)
pfR_input = cbind(Gene_symbol,pfR_input)
name = "Reports/DEG_LmPiD_RNA_PDXmid_v_PDXpre_pathfindR"
#Delete old
unlink(name, recursive = TRUE)
pfr_tmp <- run_pathfindR(pfR_input,
iterations = 10,
p_val_threshold = 0.05,
search_method = "GR",
#gene_sets = "Reactome",
#pin_name_path = "STRING",
plot_enrichment_chart = FALSE,
visualize_enriched_terms = FALSE,
output_dir = name,
silent_option = TRUE)
pfr_tmp <- pfr_tmp[order(pfr_tmp$lowest_p, decreasing = FALSE), ]
assign(paste("pfr_",name,sep=""),pfr_tmp)
pathfindR_visNetwork(pfr_tmp,paste(name,"visNetwork.html",sep="/"))
hsa_preview(pfr_tmp,pfR_input,outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
rm("pfr_tmp")
library("pathfindR")
library("visNetwork")
pfR_input = DEG_top[,c("logFC","P.Value"),]
Gene_symbol = row.names(pfR_input)
pfR_input = cbind(Gene_symbol,pfR_input)
name = "Reports/DEG_LmPiD_RNA_PDXmid_v_PDXpre_pathfindR_STRING"
#Delete old
unlink(name, recursive = TRUE)
pfr_tmp <- run_pathfindR(pfR_input,
iterations = 10,
p_val_threshold = 0.05,
search_method = "GR",
#gene_sets = "Reactome",
pin_name_path = "STRING",
plot_enrichment_chart = FALSE,
visualize_enriched_terms = FALSE,
output_dir = name,
silent_option = TRUE)
pfr_tmp <- pfr_tmp[order(pfr_tmp$lowest_p, decreasing = FALSE), ]
assign(paste("pfr_",name,sep=""),pfr_tmp)
pathfindR_visNetwork(pfr_tmp,paste(name,"visNetwork.html",sep="/"))
hsa_preview(pfr_tmp,pfR_input,outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
rm("pfr_tmp")
library("pathfindR")
library("visNetwork")
pfR_input = DEG_top[,c("logFC","P.Value"),]
Gene_symbol = row.names(pfR_input)
pfR_input = cbind(Gene_symbol,pfR_input)
name = "Reports/DEG_LmPiD_RNA_PDXmid_v_PDXpre_pathfindR_STRING"
#Delete old
unlink(name, recursive = TRUE)
pfr_tmp <- run_pathfindR(pfR_input,
iterations = 10,
p_val_threshold = 0.05,
search_method = "GR",
#gene_sets = "Reactome",
pin_name_path = "STRING",
adj_method = FALSE,
plot_enrichment_chart = FALSE,
visualize_enriched_terms = FALSE,
output_dir = name,
silent_option = TRUE)
library("pathfindR")
library("visNetwork")
pfR_input = DEG_top[,c("logFC","P.Value"),]
Gene_symbol = row.names(pfR_input)
pfR_input = cbind(Gene_symbol,pfR_input)
name = "Reports/DEG_LmPiD_RNA_PDXmid_v_PDXpre_pathfindR_STRING"
#Delete old
unlink(name, recursive = TRUE)
pfr_tmp <- run_pathfindR(pfR_input,
iterations = 10,
p_val_threshold = 0.05,
search_method = "GR",
#gene_sets = "Reactome",
#pin_name_path = "STRING",
plot_enrichment_chart = FALSE,
visualize_enriched_terms = FALSE,
output_dir = name,
silent_option = TRUE)
pfr_tmp <- pfr_tmp[order(pfr_tmp$lowest_p, decreasing = FALSE), ]
assign(paste("pfr_",name,sep=""),pfr_tmp)
pathfindR_visNetwork(pfr_tmp,paste(name,"visNetwork.html",sep="/"))
hsa_preview(pfr_tmp,pfR_input,outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
rm("pfr_tmp")
library("edgeR")
library("plotly")
metadata = Meta_all[train_samples,]
metadata[] <- lapply(metadata, factor)
design = model.matrix(~0+Time+PiD,metadata)
DEG_fit = lmFit(RNA_filtered_z[,train_samples],design)
cm = makeContrasts(Mid_v_Pre=TimeMID-TimePRE,levels=design)
DEG_fit_cm = contrasts.fit(DEG_fit,cm)
DEG_fit_cm_eBayesfit = eBayes(DEG_fit_cm,trend = FALSE,robust = FALSE)
DEG_top = topTable(DEG_fit_cm_eBayesfit,adjust.method="fdr", number=Inf)
# DEG_fit_cm_eBayesfit = eBayes(DEG_fit,trend = FALSE,robust = FALSE)
# DEG_top = topTable(DEG_fit_cm_eBayesfit, coef = "TimePRE",adjust.method="fdr", number=Inf)
DEG_top
write.csv(DEG_top,"./Reports/DEG_LmPiD_RNAz_PDXmid_v_PDXpre.csv")
thresh_Pval = 0.05
thresh_FC = 0
tmp = DEG_top[intersect(which(DEG_top$P.Value <= thresh_Pval),which(abs(DEG_top$logFC) >= thresh_FC)),]
up = as.integer(length(which(tmp$logFC > 0)))
down =  as.integer(length(which(tmp$logFC <= 0)))
print(paste("Total DEG: ", up+down))
print(paste("Sigificantly up-reglated genes: ", up))
print(paste("Sigificantly down-reglated genes: ", down))
rm("tmp","up","down")
#Volcano plot of DEG
fig <- plot_ly(data = DEG_top, x = ~logFC, y = ~-1*log10(P.Value),color = ~logFC, colors="RdBu")%>%
layout(xaxis = list(title = "DeltaZ"),yaxis = list(title = "-log(p-value)"),
shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(DEG_top))
plotly::export(p=fig,file = "Reports/DEG_LmPID_RNAz_PDXmid_v_PDXpre.png")
fig
library("pathfindR")
library("visNetwork")
pfR_input = DEG_top[,c("logFC","P.Value"),]
Gene_symbol = row.names(pfR_input)
pfR_input = cbind(Gene_symbol,pfR_input)
name = "Reports/DEG_LmPiD_RNAz_PDXmid_v_PDXpre_pathfindR"
#Delete old
unlink(name, recursive = TRUE)
pfr_tmp <- run_pathfindR(pfR_input,
iterations = 10,
p_val_threshold = 0.05,
search_method = "GR",
#gene_sets = "Reactome",
#pin_name_path = "STRING",
plot_enrichment_chart = FALSE,
visualize_enriched_terms = FALSE,
output_dir = name,
silent_option = TRUE)
pfr_tmp <- pfr_tmp[order(pfr_tmp$lowest_p, decreasing = FALSE), ]
assign(paste("pfr_",name,sep=""),pfr_tmp)
pathfindR_visNetwork(pfr_tmp,paste(name,"visNetwork.html",sep="/"))
hsa_preview(pfr_tmp,pfR_input,outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
rm("pfr_tmp")
library(stringr)
library(tidyr)
tmp = pfr_tmp[1:10,]
vline <- function(x = 0, color = "black") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color, dash="dot"))
}
hline <- function(y = 0, color = "black") {
list(
type = "line",
x0 = 0,
x1 = 1,
xref = "paper",
y0 = y,
y1 = y,
line = list(color = color, dash="dot"))
}
anno_gen = function(df){
library(ComplexHeatmap)
hm_anno = HeatmapAnnotation(df = as.data.frame(df),
col=list(
Model_ = c("5958MB"="darkslateblue","4989MB"="darkturquoise"),
Source_ = c("Patient"="gold4", "CCL"="red4","Xeno"="springgreen4"),
Time_ = c("t0"="grey0","rI"="grey40","rII"="grey80","rIII"="grey99"),
Rx_ = c("VEH"="dodgerblue4","PEV"="chartreuse4")
)
)
return(hm_anno)
}
pathfindR_visNetwork = function(pfr_tmp,flnm="visNetwork.html"){
ID_column <- "Term_Description"
edges <- data.frame()
all_up = c()
all_down = c()
for (i in base::seq_len(nrow(pfr_tmp))) {
up_genes <- unlist(strsplit(pfr_tmp$Up_regulated[i],", "))
all_up = unique(c(all_up,up_genes))
down_genes <- unlist(strsplit(pfr_tmp$Down_regulated[i],", "))
all_down = unique(c(all_down,down_genes))
genes <- c(up_genes, down_genes)
for (gene in genes) {
edges <- rbind(edges, data.frame(Term = pfr_tmp[i, ID_column], Gene = gene))
}
}
pathways = as.data.frame(unique(edges$Term))
colnames(pathways) = "id"
pathways[,"color"] = "grey"
pathways[,"group"] = "Pathway"
pathways[,"shape"] = "square"
pathways[,"font.size"] = 30
all_up = as.data.frame(all_up)
colnames(all_up) = "id"
all_up[,"color"] = "green"
all_up[,"group"] = "Up_regulated"
all_up[,"shape"] = "circle"
all_up[,"font.size"] = 20
all_down = as.data.frame(all_down)
colnames(all_down) = "id"
all_down[,"color"] = "darkred"
all_down[,"group"] = "Down_regulated"
all_down[,"shape"] = "circle"
all_down[,"font.size"] = 20
nodes = rbind(pathways,all_up,all_down)
colnames(edges) = c("from","to")
rm("pathways","all_up","all_down")
graph = visNetwork(nodes, edges,width='100%',height=2000)%>%
visPhysics(stabilization = list(iterations=500))%>%
visNodes(color = list(inherit=FALSE), font = list(size = 30))%>%
visEdges(color = list(inherit=FALSE, font = list(size = 40)))%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T)) %>%
visInteraction(multiselect = TRUE) %>%
visLayout(randomSeed = 123)%>%
visGroups(groupname = "Pathway", color = "grey") %>%
visGroups(groupname = "Up_regulated", color = "green") %>%
visGroups(groupname = "Down_regulated", color = "darkred") %>%
visLegend(position = "right")
visSave(graph, file=flnm, selfcontained = TRUE, background = "white")
}
pathfindR_enriched_genes = function(pfr_tmp){
ID_column <- "Term_Description"
edges <- data.frame()
all_up = c()
all_down = c()
for (i in base::seq_len(nrow(pfr_tmp))) {
up_genes <- unlist(strsplit(pfr_tmp$Up_regulated[i],", "))
all_up = unique(c(all_up,up_genes))
down_genes <- unlist(strsplit(pfr_tmp$Down_regulated[i],", "))
all_down = unique(c(all_down,down_genes))
genes <- c(up_genes, down_genes)
for (gene in genes) {
edges <- rbind(edges, data.frame(Term = pfr_tmp[i, ID_column], Gene = gene))
}
}
nodes = rbind(all_up,all_down)
return(nodes)
}
hsa_preview = function(pfr_results,input_df,outdir="./hsa_preview"){
pathview_in = pfR_input %>% dplyr::select("logFC")
for(i in 1:nrow(pfr_results)){
mypathway<-pfr_results$ID[i]
Pathway_name = pfr_results$Term_Description[i]
dir.create(file.path(outdir, Pathway_name), showWarnings = FALSE,recursive = TRUE)
setwd(file.path(outdir, Pathway_name))
library(pathview)
pathview(gene.data=pathview_in,
species="hsa",
pathway=mypathway,gene.idtype = "SYMBOL",
low = list(gene = "red", cpd = "blue"),
mid = list(gene = "gray", cpd = "gray"),
high = list(gene = "green", cpd = "yellow"))
}
}
#BiocManager::install("EnsDb.Hsapiens.v79") ##Install
library("readxl")
library("EnsDb.Hsapiens.v79")
library(caret)
Base_dir = "M:\\BCM-NW_Xiaonan\\RNAseq"
knitr::opts_knit$set(root.dir = Base_dir)
setwd(Base_dir)
Meta_all <- read_excel("MB_meta.xlsx",col_names=TRUE)
Meta_all[] <- lapply(Meta_all, factor)
RNA_all <- read.csv("MB_expression.csv", row.names=1)
RNA_all = RNA_all[,as.character(Meta_all$Sample)]
rm = nearZeroVar(t(RNA_all))
RNA_all = RNA_all[-rm,]
library("RColorBrewer")
library("edgeR")
nsamples <- ncol(RNA_all)
col <- brewer.pal(nsamples, "Paired")
par(mfrow=c(1,2))
plot(density(as.matrix(RNA_all[,1])), col=col[1], lwd=2, ylim=c(0,1), las=2, main="", xlab="")
title(main="Z-normalized (ALL)", xlab="Log-cpm")
#abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(as.matrix(RNA_all[,i]))
lines(den$x, den$y, col=col[i], lwd=2)
}
library("edgeR")
library("plotly")
DGE_design = model.matrix(~0+Time_+Model_+Source_,Meta_all)
DGE_fit = lmFit(RNA_all,DGE_design)
DGE_cm = makeContrasts(matrix=Time_rIII-Time_rI,levels=DGE_design)
DGE_fit_cm = contrasts.fit(DGE_fit,DGE_cm)
DGE_fit_cm_eBayesfit = eBayes(DGE_fit_cm,trend = FALSE,robust = FALSE)
DGE_top = topTable(DGE_fit_cm_eBayesfit,adjust.method="fdr", number=Inf)
DGE_top
thresh_Pval = 0.05
thresh_FC = 1
tmp = DGE_top[intersect(which(DGE_top$P.Value <= thresh_Pval),which(abs(DGE_top$logFC) >= thresh_FC)),]
up = as.integer(length(which(tmp$logFC > 0)))
down =  as.integer(length(which(tmp$logFC <= 0)))
print(paste("Total DEG: ", up+down))
print(paste("Sigificantly up-reglated genes: ", up))
print(paste("Sigificantly down-reglated genes: ", down))
rm("tmp","up","down")
#Volcano plot of DEG
plot_DGE <- plot_ly(data = DGE_top, x = ~logFC, y = ~-1*log10(P.Value),color = ~logFC, colors="RdBu")%>%
layout(xaxis = list(title = "log(FC)"),yaxis = list(title = "-log(p-value)"), shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(DGE_top))
plot_DGE
library("pathfindR")
library("visNetwork")
library(xlsx)
name = "2023_Primary2Recurrent"
pfR_input = DGE_top[intersect(which(DGE_top$P.Value <= 0.05),which(abs(DGE_top$logFC) >= 1)),]
pfR_input$SYMBOL = row.names(pfR_input)
pfR_input = pfR_input %>% dplyr::select(c("SYMBOL","logFC","P.Value"))
#Delete old
unlink(name, recursive = TRUE)
pfr_tmp <- run_pathfindR(pfR_input,
iterations = 10,
p_val_threshold = 0.05,
search_method = "GR",
#gene_sets = "Reactome",
#pin_name_path = "STRING",
plot_enrichment_chart = FALSE,
visualize_enriched_terms = FALSE,
output_dir = name,
silent_option = FALSE)
library("pathfindR")
library("visNetwork")
library(xlsx)
name = "2023_Primary2Recurrent"
pfR_input = DGE_top[intersect(which(DGE_top$P.Value <= 0.05),which(abs(DGE_top$logFC) >= 1)),]
pfR_input$SYMBOL = row.names(pfR_input)
pfR_input = pfR_input %>% dplyr::select(c("SYMBOL","logFC","P.Value"))
#Delete old
unlink(name, recursive = TRUE)
pfr_tmp <- run_pathfindR(pfR_input,
iterations = 10,
p_val_threshold = 0.05,
search_method = "GR",
#gene_sets = "Reactome",
#pin_name_path = "STRING",
plot_enrichment_chart = FALSE,
visualize_enriched_terms = FALSE,
output_dir = name,
silent_option = FALSE)
assign(paste("pfr_",name,sep=""),pfr_tmp)
pfr_tmp <- pfr_tmp[order(pfr_tmp$lowest_p, decreasing = FALSE), ]
pfr_tmp
write.xlsx(pfr_tmp,file=paste(name,"enriched_terms.xlsx",sep="/"),sheetName = "Sheet1")
pathfindR_visNetwork(pfr_tmp,paste(name,"visNetwork.html",sep="/"))
hsa_preview(pfr_2023_Primary2Recurrent,pfR_input,outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
pfR_input = DGE_top#[intersect(which(DGE_top$P.Value <= 0.05),which(abs(DGE_top$logFC) >= 1)),]
hsa_preview = function(pfr_results,input_df,outdir="./hsa_preview"){
pathview_in = pfR_input %>% dplyr::select("logFC")
for(i in 1:nrow(pfr_results)){
tryCatch({
mypathway<-pfr_results$ID[i]
Pathway_name = pfr_results$Term_Description[i]
dir.create(file.path(outdir, Pathway_name), showWarnings = FALSE,recursive = TRUE)
setwd(file.path(outdir, Pathway_name))
library(pathview)
pathview(gene.data=pathview_in,
species="hsa",
pathway=mypathway,gene.idtype = "SYMBOL",
low = list(gene = "red", cpd = "blue"),
mid = list(gene = "gray", cpd = "gray"),
high = list(gene = "green", cpd = "yellow"))},error=function(e){})
}
}
hsa_preview(pfr_2023_Primary2Recurrent,pfR_input,outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
pfR_input = DGE_top#[intersect(which(DGE_top$P.Value <= 0.05),which(abs(DGE_top$logFC) >= 1)),]
pfR_input$SYMBOL = row.names(pfR_input)
pfR_input = pfR_input %>% dplyr::select(c("SYMBOL","logFC","P.Value"))
hsa_preview(pfr_2023_Primary2Recurrent,pfR_input,outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
pfR_input
hsa_preview(pfr_2023_Primary2Recurrent,pfR_input[,"logFC"],outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
enrichment_chart(pfr_2023_Primary2Recurrent)
save.image("RNAseq_DEG_MB")
sessionInfo()
# Script prefix:
SpecialDoubleValueStrings <- c("NA", "NaN", "Inf", "-Inf")
FactorOrNumber <- function(vec)
{
# Heuristic to see if vec is numeric but with some non-numeric values
# Rule:
# First trim any pre-existing NAs
# Then if there is only 1 level in the non-numeric elements, assume that string
# is the NA marker and the vector is actually numeric; Alternatively,
# if the only non-numeric values lie in the set {"NA", "NaN", "-Inf", "Inf"}, treat vector as numeric;
# otherwise, leave it as a factor.
if (is.factor(vec))
{
vecNoNA <- na.omit(vec)
vecnum <- suppressWarnings(as.numeric(levels(vecNoNA))[vecNoNA])
vecNumeric <- vecNoNA[!is.na(vecnum), drop=TRUE]
vecNonNumeric <- vecNoNA[is.na(vecnum), drop=TRUE]
if ((length(levels(vecNonNumeric)) == 1 && length(vecNumeric) > 1) ||
!any(is.na(match(vecNonNumeric, SpecialDoubleValueStrings))))
{
vec <- suppressWarnings(as.numeric(levels(vec))[vec])
}
}
vec
}
# Convert factors that should be numbers back to numbers.
cleanRdata <- function(x)
{
if (!is.null(x))
{
for (ii in 1:ncol(x))
{
if (is.factor(x[[ii]]))
x[[ii]] <- FactorOrNumber(x[[ii]])
}
}
x
}
AllData <- NULL
try(AllData <- read.csv("C:/BIOVIA/web/jobs/rpowell/ppcB2FF4-444C-40F3-8594-51A779D5F261/temp/4F0A.tmp"))
# Use the following statement to turn factors that "should" be numeric
# back to numeric variables:
# AllData <- cleanRdata(AllData)
attach(AllData)
png(filename = "C:/BIOVIA/web/jobs/rpowell/ppcB2FF4-444C-40F3-8594-51A779D5F261/temp/Rplot9576662%03d.png", width = 600, height = 600)
# End of prefix
# Script body:
library(umap)
#Pass configuration settings
custom.config <- umap.defaults
custom.config$n_neighbors = 15
custom.config$n_components = 2
custom.config$metric = "euclidean"
custom.config$n_epochs = 200
custom.config$init = "spectral"
custom.config$min_dist = 0.1
custom.config$set_op_mix_ratio = 1
custom.config$local_connectivity = 1
custom.config$bandwidth = 1
custom.config$alpha = 1
custom.config$gamma = 1
custom.config$negative_sample_rate = 5
custom.config$spread = 1
custom.config$random_state = 1536
#Generate UMAP embedding
AllData.umap <- umap(AllData[,which(sapply(AllData,class) == "numeric")], config=custom.config)
Results = AllData.umap$layout
names = c()
for (i in 1:2){names[i] = paste("UMAP",i,sep="")}
colnames(Results) = names
# End of body
# Script suffix:
dev.off()
write.table(Results, file="C:/BIOVIA/web/jobs/rpowell/ppcB2FF4-444C-40F3-8594-51A779D5F261/temp/4F1E.tmp", sep=",", col.names=T, row.names=F, quote=F, append = FALSE)
AllData.umap$data
M3C
BiocManager::install("M3C")
View(Results)
library(M3C)
r = M3C(AllData.umap$data,cores = 1, iters = 25, maxK = 10,pItem = 0.8,ref_method = "reverse-pca",clusteralg= "hc", method = 2)
r = M3C(AllData.umap$data,cores = 1, method = 2)
r = M3C(AllData.umap$data,cores = 1, method = 2)
r = M3C(AllData.umap$data,cores = 1, method = 1)
r = M3C(t(AllData.umap$data),cores = 1, method = 1)
if (TRUE){
library(M3C)
r = M3C(t(AllData.umap$data),cores = 1, method = 2)
}
r = M3C(AllData.umap$data,cores = 1, method = 2)
AllData.umap$data
r = M3C(data.frame(AllData.umap$data),cores = 1, method = 2)
r = M3C(data.frame(t(AllData.umap$data)),cores = 1, method = 2)
View(r)
Results$Clus = r$assignments
View(Results)
AllData.umap <- umap(AllData[,which(sapply(AllData,class) == "numeric")], config=custom.config)
Results = AllData.umap$layout
names = c()
for (i in 1:2){names[i] = paste("UMAP",i,sep="")}
colnames(Results) = names
Results[,"Cluster"] = r$assignments
r$assignments
Results = data.frame(AllData.umap$layout)
names = c()
Results = data.frame(AllData.umap$layout)
names = c()
for (i in 1:2){names[i] = paste("UMAP",i,sep="")}
colnames(Results) = names
View(Results)
Results[,"Cluster"] = r$assignments
View(Results)
version()
R
