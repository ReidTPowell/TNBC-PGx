type = "line",
x0 = 0,
x1 = 1,
xref = "paper",
y0 = y,
y1 = y,
line = list(color = color, dash="dot"))
}
anno_gen = function(df){
library(ComplexHeatmap)
hm_anno = HeatmapAnnotation(df = as.data.frame(df_anno),
annotation_name_side = "left",
col=list(
Time=c("PRE"="grey80",
"MID"="grey40",
"POST"="grey0"
),
PiD =c("TNBC117"="yellow3",
"TNBC231"="wheat3",
"TNBC249"="violetred3",
"TNBC283"="turquoise3",
"TNBC010"="tomato3",
"TNBC139"="thistle3",
"TNBC047"="tan3",
"TNBC271"="steelblue3",
"ATID099"="springgreen3",
"ATID608"="snow3"
)
)
)
return(hm_anno)
}
pathfindR_visNetwork = function(pfr_tmp,flnm="visNetwork.html"){
ID_column <- "Term_Description"
edges <- data.frame()
all_up = c()
all_down = c()
for (i in base::seq_len(nrow(pfr_tmp))) {
up_genes <- unlist(strsplit(pfr_tmp$Up_regulated[i],", "))
all_up = unique(c(all_up,up_genes))
down_genes <- unlist(strsplit(pfr_tmp$Down_regulated[i],", "))
all_down = unique(c(all_down,down_genes))
genes <- c(up_genes, down_genes)
for (gene in genes) {
edges <- rbind(edges, data.frame(Term = pfr_tmp[i, ID_column], Gene = gene))
}
}
pathways = as.data.frame(unique(edges$Term))
colnames(pathways) = "id"
pathways[,"color"] = "grey"
pathways[,"group"] = "Pathway"
pathways[,"shape"] = "square"
pathways[,"font.size"] = 20
all_up = as.data.frame(all_up)
colnames(all_up) = "id"
all_up[,"color"] = "green"
all_up[,"group"] = "Up_regulated"
all_up[,"shape"] = "dot"
all_up[,"font.size"] = 10
all_down = as.data.frame(all_down)
colnames(all_down) = "id"
all_down[,"color"] = "darkred"
all_down[,"group"] = "Down_regulated"
all_down[,"shape"] = "dot"
all_down[,"font.size"] = 10
nodes = rbind(pathways,all_up,all_down)
colnames(edges) = c("from","to")
rm("pathways","all_up","all_down")
graph = visNetwork(nodes, edges,width='100%',height=2000)%>%
visPhysics(stabilization = list(iterations=500))%>%
visNodes(color = list(inherit=FALSE), font = list(size = 30))%>%
visEdges(color = list(inherit=FALSE, font = list(size = 40)))%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T)) %>%
visInteraction(multiselect = TRUE) %>%
visLayout(randomSeed = 123)%>%
visGroups(groupname = "Pathway", color = "grey") %>%
visGroups(groupname = "Up_regulated", color = "green") %>%
visGroups(groupname = "Down_regulated", color = "darkred") %>%
visLegend(position = "right")
visSave(graph, file=flnm, selfcontained = TRUE, background = "white")
}
hsa_preview = function(pfr_results, input_df_tmp ,outdir="./hsa_preview"){
pathview_in = input_df_tmp %>% dplyr::select("logFC")
for(i in 1:nrow(pfr_results)){
tryCatch({
mypathway<-pfr_results$ID[i]
Pathway_name = pfr_results$Term_Description[i]
dir.create(file.path(outdir, Pathway_name), showWarnings = FALSE,recursive = TRUE)
setwd(file.path(outdir, Pathway_name))
library(pathview)
pathview(gene.data=pathview_in,
species="hsa",
pathway=mypathway,gene.idtype = "SYMBOL",
low = list(gene = "red", cpd = "blue"),
mid = list(gene = "gray", cpd = "gray"),
high = list(gene = "green", cpd = "yellow"))},error=function(e){})
}
}
library("readxl")
library("dplyr")
#library("xlsx")
library("dplyr")
Base_dir = "D:\\Users\\rpowell\\Documents\\GitHub\\TNBC-PGx"
knitr::opts_knit$set(root.dir = Base_dir)
setwd(Base_dir)
#DNA_all <- read.xlsx2("data/TNBC_oncoprint_binary.xlsx",sheetIndex = 1,row.names = 1)
RNA_all <- read.csv("./data/RNA_combat.220304.csv",row.names=1)
Base_dir
setwd(Base_dir)
library("readxl")
library("dplyr")
#library("xlsx")
library("dplyr")
Base_dir = "D:\\Users\\rpowell\\Documents\\GitHub\\TNBC-PGx"
knitr::opts_knit$set(root.dir = Base_dir)
setwd(Base_dir)
#DNA_all <- read.xlsx2("data/TNBC_oncoprint_binary.xlsx",sheetIndex = 1,row.names = 1)
RNA_all <- read.csv("./data/RNA_combat.220304.csv",row.names=1)
library("readxl")
library("dplyr")
#library("xlsx")
library("dplyr")
Base_dir = "D:\\Users\\rpowell\\Documents\\GitHub\\TNBC-PGx"
knitr::opts_knit$set(root.dir = Base_dir)
setwd(Base_dir)
#DNA_all <- read.xlsx2("data/TNBC_oncoprint_binary.xlsx",sheetIndex = 1,row.names = 1)
RNA_all <- read.csv("./data/RNA_combat.220304.csv",row.names=1)
#ssGSEA_all <- read.csv("./data/RNA_combat.220304.csv",row.names=1)
Drug_all <- read.csv("./data/Drug_AUC.csv",row.names=1)
Drug_meta <- read.csv("./data/Drug_metadata.csv",row.names=1)
Meta_all <- read_excel("./data/PDX_metadata.xlsx")
PPI = "./data/STRING.csv"
row.names(Meta_all) = Meta_all$PDX_ID
pairsOnly = T
cellLine_drug = colnames(Drug_all)
drugnames = row.names(Drug_all)
cellLine_RNA = colnames(RNA_all)
#genenames = row.names(RNA_filtered_RWR)
all_samples = intersect(cellLine_drug,cellLine_RNA)
Pairs = Meta_all %>% dplyr::count(PiD)
Pairs = Pairs[which(Pairs$n >= 2),]
Meta_pairsOnly = Meta_all[which(Meta_all$PiD %in% Pairs$PiD),]
row.names(Meta_pairsOnly) = Meta_pairsOnly$PDX_ID
if (pairsOnly){
train_samples = intersect(all_samples,Meta_pairsOnly$PDX_ID)
} else{train_samples = all_samples}
train_samples
tmp = setdiff(colnames(RNA_all),train_samples)
test_samples = intersect(colnames(Drug_all),tmp)
unknown_samples = setdiff(tmp,colnames(Drug_all))
with_held_RNA = RNA_all[,test_samples]
with_held_Drug = Drug_all[,test_samples]
with_held_common = intersect(colnames(with_held_RNA),colnames(with_held_Drug))
with_held_RNA = with_held_RNA[,with_held_common]
with_held_Drug = with_held_Drug[,with_held_common]
rm("tmp","Pairs")
library("readxl")
library("dplyr")
#library("xlsx")
library("dplyr")
Base_dir = "D:\\Users\\rpowell\\Documents\\GitHub\\TNBC-PGx"
knitr::opts_knit$set(root.dir = Base_dir)
setwd(Base_dir)
#DNA_all <- read.xlsx2("data/TNBC_oncoprint_binary.xlsx",sheetIndex = 1,row.names = 1)
RNA_all <- read.csv("./data/RNA_combat.220304.csv",row.names=1)
#ssGSEA_all <- read.csv("./data/RNA_combat.220304.csv",row.names=1)
Drug_all <- read.csv("./data/Drug_AUC.csv",row.names=1)
Drug_meta <- read.csv("./data/Drug_metadata.csv",row.names=1)
Meta_all <- read_excel("./data/PDX_metadata.xlsx")
row.names(Meta_all) = Meta_all$PDX_ID
pairsOnly = T
cellLine_drug = colnames(Drug_all)
drugnames = row.names(Drug_all)
cellLine_RNA = colnames(RNA_all)
#genenames = row.names(RNA_filtered_RWR)
all_samples = intersect(cellLine_drug,cellLine_RNA)
Pairs = Meta_all %>% dplyr::count(PiD)
Pairs = Pairs[which(Pairs$n >= 2),]
Meta_pairsOnly = Meta_all[which(Meta_all$PiD %in% Pairs$PiD),]
row.names(Meta_pairsOnly) = Meta_pairsOnly$PDX_ID
if (pairsOnly){
train_samples = intersect(all_samples,Meta_pairsOnly$PDX_ID)
} else{train_samples = all_samples}
train_samples
tmp = setdiff(colnames(RNA_all),train_samples)
test_samples = intersect(colnames(Drug_all),tmp)
unknown_samples = setdiff(tmp,colnames(Drug_all))
with_held_RNA = RNA_all[,test_samples]
with_held_Drug = Drug_all[,test_samples]
with_held_common = intersect(colnames(with_held_RNA),colnames(with_held_Drug))
with_held_RNA = with_held_RNA[,with_held_common]
with_held_Drug = with_held_Drug[,with_held_common]
rm("tmp","Pairs")
library("matrixStats")
RNA_means = rowMeans(as.matrix(RNA_all))
RNA_stdDev = rowSds(as.matrix(RNA_all))
plot(RNA_means,RNA_stdDev)
RNA_filter = which(RNA_means >= .5)
RNA_filtered = RNA_all[RNA_filter,]
RNA_filtered_z = t(scale(t(RNA_filtered), center = T, scale = T))
library("RColorBrewer")
nsamples <- ncol(RNA_filtered)
col <- brewer.pal(nsamples, "Paired")
par(mfrow=c(1,2))
plot(density(as.matrix(RNA_filtered[,1])), col=col[1], lwd=2, ylim=c(0,1), las=2, main="", xlab="")
title(main="Filtered data", xlab="RNAseq")
#abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(as.matrix(RNA_filtered[,i]))
lines(den$x, den$y, col=col[i], lwd=2)
}
boxplot(RNA_filtered[,], las=2, col=col, main="")
title(main="Filtered data",ylab="RNAseq")
library(matrixStats)
drug_range = rowRanges(as.matrix(Drug_all),useNames = TRUE)
drug_range[drug_range < 0] <- 0
drug_range = drug_range[,2]-drug_range[,1]
drug_filter = which(drug_range >= 0.5)
library(matrixStats)
drug_range = rowRanges(as.matrix(Drug_all),useNames = TRUE)
drug_range[drug_range < 0] <- 0
drug_range = drug_range[,2]-drug_range[,1]
drug_filter = which(drug_range >= 0.5)
ord = colnames(Drug_all)
gr = Meta_all[ord,]
test = cor(gr$Log2_FC_3day,t(Drug_all))
r2 = test^2
#get list of correlated and variable drug names
growth_corr = names(r2[,which(r2 > 0.25)])
variable_drugs = names(drug_filter)
x = list(Growth_correlated_drugs = growth_corr,
Variable_drug_response = variable_drugs)
library(ggvenn)
ggvenn(x,
fill_color = c("#0073C2FF","#CD534CFF"),
stroke_size = 0.5, set_name_size = 4)
rm('x','r2','test','gr')
intersect(growth_corr,variable_drugs)
drug_filter = variable_drugs[!(variable_drugs %in% growth_corr)]
drug_filter[order(drug_filter)]
library("dendextend")
library("ComplexHeatmap")
CCL_corr = cor(as.matrix(t(scale(t(Drug_all[drug_filter,train_samples]),center=TRUE, scale=TRUE))),method = c("pearson"))
df_anno = Meta_all[train_samples,]%>%dplyr::select("Time","PiD")
K = 7
hc = hclust(dist(CCL_corr))
clus = cutree(hc,k=K)
df_anno_clust = cbind(df_anno,clus)
chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
row_dend = color_branches(row_dend, k = K)
HM = Heatmap(CCL_corr,
name = "Pearson",
top_annotation = anno_gen(df_anno),
show_row_names = FALSE)
HM
rm('HM','df_anno','hc','df_anno_clust','CCL_corr','den')
library(edgeR)
metadata = Meta_all[train_samples,]
metadata[] <- lapply(metadata, factor)
design = model.matrix(~0+Time+PiD,metadata)
Rx_fit = lmFit(Drug_all[drug_filter,train_samples],design)
Rx_fit_eBayesfit = eBayes(Rx_fit,trend = TRUE,robust = TRUE)
Rx_top = topTable(Rx_fit_eBayesfit,coef = "TimeMID" ,adjust.method="fdr", number=Inf)
Mid_v_Pre = c()
Pst_v_Pre = c()
for (i in 1:nrow(Drug_all)){
tmp1 = t(Drug_all[i,train_samples])
colnames(tmp1) = "Active"
tmp2 = Meta_all[train_samples,]
tmp3 = cbind(tmp1,tmp2)
tmp4 = tmp3[,c("Active","Time","PiD")]
tmp5 = reshape(tmp4, direction = "wide", idvar = "PiD", timevar = "Time")
tmp6 = tmp5$Active.MID-tmp5$Active.PRE
tmp7 = tmp5$Active.POST-tmp5$Active.PRE
names(tmp6) = tmp5$PiD
names(tmp7) = tmp5$PiD
Mid_v_Pre = rbind(Mid_v_Pre,tmp6)
Pst_v_Pre = rbind(Pst_v_Pre,tmp7)
}
rm(list = c("tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7"))
rownames(Mid_v_Pre) = row.names(Drug_all)
Mid_v_Pre = Mid_v_Pre[ , colSums(is.na(Mid_v_Pre)) == 0]
Mid_v_Pre = Mid_v_Pre[rownames(Rx_top),]
rownames(Pst_v_Pre) = row.names(Drug_all)
Pst_v_Pre = Pst_v_Pre[ , colSums(is.na(Pst_v_Pre)) == 0]
Pst_v_Pre = Pst_v_Pre[rownames(Rx_top),]
Rx_top = cbind(Rx_top,shift=rowMeans(cbind(Mid_v_Pre,Pst_v_Pre)))
Rx_top
write.csv(Rx_top,"./Reports/Drug_LmPiD_AUC_MID.csv")
thresh_Pval = 0.05
thresh_FC = 0.05
tmp = Rx_top[intersect(which(Rx_top$P.Value <= thresh_Pval),which(abs(Rx_top$shift) >= thresh_FC)),]
up = as.integer(length(which(tmp$shift > 0)))
down =  as.integer(length(which(tmp$shift <= 0)))
print(paste("Total DEG: ", up+down))
print(paste("Sigificantly up-reglated genes: ", up))
print(paste("Sigificantly down-reglated genes: ", down))
rm("tmp","up","down")
#Volcano plot of DEG
fig <- plot_ly(data = Rx_top, x = ~shift, y = ~-1*log10(P.Value))%>%
layout(xaxis = list(title = "Delta", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(Rx_top),marker = list(color='black'))
plotly::export(p=fig,file = "Reports/Drug_LmPiD_AUC_MID.png")
fig
rm('design','fig','group_df','metadata','row_dend','rAnno')
library(edgeR)
metadata = Meta_all[train_samples,]
metadata[] <- lapply(metadata, factor)
design = model.matrix(~0+Time+PiD,metadata)
Rx_fit = lmFit(Drug_all[drug_filter,train_samples],design)
Rx_fit_eBayesfit = eBayes(Rx_fit,trend = TRUE,robust = TRUE)
Rx_top = topTable(Rx_fit_eBayesfit,coef = "TimeMID" ,adjust.method="fdr", number=Inf)
Mid_v_Pre = c()
Pst_v_Pre = c()
for (i in 1:nrow(Drug_all)){
tmp1 = t(Drug_all[i,train_samples])
colnames(tmp1) = "Active"
tmp2 = Meta_all[train_samples,]
tmp3 = cbind(tmp1,tmp2)
tmp4 = tmp3[,c("Active","Time","PiD")]
tmp5 = reshape(tmp4, direction = "wide", idvar = "PiD", timevar = "Time")
tmp6 = tmp5$Active.MID-tmp5$Active.PRE
tmp7 = tmp5$Active.POST-tmp5$Active.PRE
names(tmp6) = tmp5$PiD
names(tmp7) = tmp5$PiD
Mid_v_Pre = rbind(Mid_v_Pre,tmp6)
Pst_v_Pre = rbind(Pst_v_Pre,tmp7)
}
rm(list = c("tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7"))
rownames(Mid_v_Pre) = row.names(Drug_all)
Mid_v_Pre = Mid_v_Pre[ , colSums(is.na(Mid_v_Pre)) == 0]
Mid_v_Pre = Mid_v_Pre[rownames(Rx_top),]
rownames(Pst_v_Pre) = row.names(Drug_all)
Pst_v_Pre = Pst_v_Pre[ , colSums(is.na(Pst_v_Pre)) == 0]
Pst_v_Pre = Pst_v_Pre[rownames(Rx_top),]
Rx_top = cbind(Rx_top,shift=rowMeans(cbind(Mid_v_Pre,Pst_v_Pre)))
Rx_top
write.csv(Rx_top,"./Reports/Drug_LmPiD_AUC_MID.csv")
thresh_Pval = 0.05
thresh_FC = 0.05
tmp = Rx_top[intersect(which(Rx_top$P.Value <= thresh_Pval),which(abs(Rx_top$shift) >= thresh_FC)),]
up = as.integer(length(which(tmp$shift > 0)))
down =  as.integer(length(which(tmp$shift <= 0)))
print(paste("Total DEG: ", up+down))
print(paste("Sigificantly up-reglated genes: ", up))
print(paste("Sigificantly down-reglated genes: ", down))
rm("tmp","up","down")
#Volcano plot of DEG
fig <- plot_ly(data = Rx_top, x = ~shift, y = ~-1*log10(P.Value))%>%
layout(xaxis = list(title = "Delta", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(Rx_top),marker = list(color='black'))
plotly::export(p=fig,file = "Reports/Drug_LmPiD_AUC_MID.png")
fig
rm('design','fig','group_df','metadata','row_dend','rAnno')
library("ComplexHeatmap")
library("dplyr")
group_df = as.data.frame(Drug_meta[row.names(Rx_top),] %>% dplyr::select("Class"),use_raster = TRUE, raster_by_magick = TRUE)
anno_df = as.data.frame(Drug_meta[row.names(Rx_top),] %>% dplyr::select("Target"),use_raster = TRUE, raster_by_magick = TRUE)
anno_df = cbind(X1_v_X0=rowMeans(Mid_v_Pre),XS_v_X0=rowMeans(Pst_v_Pre),anno_df)
anno_txt = anno_text(anno_df$Target, which = "row")
library(circlize)
col_fun = colorRamp2(c(-0.33,0,0.33), c("blue","white","red"))
#col_fun(seq(-10, 10))
rAnno = rowAnnotation(df = anno_df,
col=list(X1_v_X0=col_fun,XS_v_X0=col_fun),
width = ncol(anno_df)*unit(10, "mm")
)
hm1 = Heatmap(Mid_v_Pre[intersect(which(Rx_top$adj.P.Val <= 0.05),which(abs(Rx_top$shift) >= 0)),],
width = ncol(Mid_v_Pre)*unit(20, "mm"),
name = "dAUC",
clustering_method_rows = "average",
column_title = "MID-PRE",
column_title_gp=gpar(fontsize=20,fontface = "bold"),
column_names_gp = gpar(fontsize = 24),
row_split = group_df$Class[intersect(which(Rx_top$adj.P.Val <= 0.05),which(abs(Rx_top$shift) >= 0))],
gap = unit(2,"mm"),
row_title_rot = 0,
row_title_gp=gpar(fontsize=24,fontface = "bold"),
heatmap_legend_param = list(
legend_direction = "horizontal",
legend_width = unit(6, "cm"),
title_position = "topcenter",
title_gp = gpar(fontsize = 24),
labels_gp = gpar(fontsize = 24)),
col = col_fun,
use_raster = TRUE, raster_by_magick = TRUE)
hm2 = Heatmap(Pst_v_Pre[intersect(which(Rx_top$adj.P.Val <= 0.05),which(abs(Rx_top$shift) >= 0)),],
width = ncol(Pst_v_Pre)*unit(20, "mm"),
name = "dAUC",
column_title = "POST-PRE",
column_title_gp=gpar(fontsize=20,fontface = "bold"),
column_names_gp = gpar(fontsize = 24),
heatmap_legend_param = list(
legend_direction = "horizontal",
legend_width = unit(6, "cm"),
title_position = "topcenter",
title_gp = gpar(fontsize = 24),
labels_gp = gpar(fontsize = 24)),
#row_labels = anno_df$Target[intersect(which(Rx_top$adj.P.Val <= 0.05),which(abs(Rx_top$shift) >= 0))],
row_names_gp = gpar(fontsize = 24),
col = col_fun,
use_raster = TRUE, raster_by_magick = TRUE)
ht_list = hm1+hm2+anno_txt
draw(ht_list,
row_title = "dAUC",
row_title_gp = gpar(col = "black"),
heatmap_legend_side = "bottom",
annotation_legend_side = "right",
legend_labels_gp = gpar(36))
rm('anno_df','anno_txt','hm1','hm2','ht_list','Mid_v_Pre','Pst_v_Pre','rAnno','group_df')
library("dendextend")
library("ComplexHeatmap")
library("dplyr")
row_variances <- apply(RNA_all[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_all[sorted_indices, ]
RNA_all_sort[1:250,]
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(CCL_corr),method = "euclidean"),method = "complete")
df_anno = Meta_all[train_samples,] %>% dplyr::select("Time","PiD")
row_dend = as.dendrogram(hc)
library(circlize)
col_fun = colorRamp2(c(-1, 0, 1), c("blue", "white", "red"))
col_fun(seq(-3, 3))
HM = Heatmap(CCL_corr,
name = "Pearson",
col = col_fun,
cluster_rows = row_dend,
cluster_columns = row_dend,
top_annotation = anno_gen(df_anno),
show_row_names = FALSE)
HM
rm('HM','CCL_corr','hc','df_anno','row_dend')
library("edgeR")
library("plotly")
metadata = Meta_all[train_samples,]
metadata[] <- lapply(metadata, factor)
design = model.matrix(~0+Time+PiD,metadata)
DEG_fit = lmFit(RNA_filtered_z[,train_samples],design)
cm = makeContrasts(Mid_v_Pre=TimeMID-TimePRE,levels=design)
DEG_fit_cm = contrasts.fit(DEG_fit,cm)
DEG_fit_cm_eBayesfit = eBayes(DEG_fit_cm,trend = FALSE,robust = FALSE)
DEG_top = topTable(DEG_fit_cm_eBayesfit,adjust.method="fdr", number=Inf)
# DEG_fit_cm_eBayesfit = eBayes(DEG_fit,trend = FALSE,robust = FALSE)
# DEG_top = topTable(DEG_fit_cm_eBayesfit, coef = "TimePRE",adjust.method="fdr", number=Inf)
DEG_top
#write.csv(DEG_top,"./Reports/DEG_LmPiD_RNAz_PDXmid_v_PDXpre.csv")
thresh_Pval = 0.05
thresh_FC = 0
tmp = DEG_top[intersect(which(DEG_top$P.Value <= thresh_Pval),which(abs(DEG_top$logFC) >= thresh_FC)),]
up = as.integer(length(which(tmp$logFC > 0)))
down =  as.integer(length(which(tmp$logFC <= 0)))
print(paste("Total DEG: ", up+down))
print(paste("Sigificantly up-reglated genes: ", up))
print(paste("Sigificantly down-reglated genes: ", down))
rm("tmp","up","down")
#Volcano plot of DEG
fig <- plot_ly(data = DEG_top, x = ~logFC, y = ~-1*log10(P.Value),color = ~logFC, colors="RdBu")%>%
layout(xaxis = list(title = "DeltaZ", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(DEG_top))
#plotly::export(p=fig,file = "Reports/DEG_LmPiD_RNAz_PDXmid_v_PDXpre.png")
fig
rm('fig','cm','design','metadata')
save.image(file='TNBC-PGx_analysis.RData')
sessionInfo()
reticulate::repl_python()
"""
Training new HiDRA model
Requirement:
expression.csv: Expression of all genes for all cell lines
geneset.gmt: Gene set description file. Consists of Gene set name, Source, Gene set member 1, Gene set member 2, ...
Training.csv: Training pair list. Consists of idx, Drug name, Cell line name, IC50 value for that pair.
Validation.csv: Validation pair list. Consists of idx, Drug name, Cell line name, IC50 value for that pair.
input_dir: The directory that includes input files.
"""
#Import basic packages
import numpy as np
import pandas as pd
import csv
import matplotlib.pyplot as plt
import seaborn as sns
import os
import argparse
#Import keras modules
import tensorflow as tf
#Import keras modules
import tensorflow as tf
import keras.backend as K
import keras.backend.tensorflow_backend as KTF
import keras
import keras.layers
from keras.layers import Layer
import keras.initializers
from keras.models import Model, Sequential,load_model
from keras.layers import Input, Dense, Dropout, BatchNormalization, Activation, Multiply, multiply,dot
from keras.layers import Concatenate,concatenate
from keras.optimizers import Adam
from keras.utils import plot_model
#Import rdkit
import rdkit
import rdkit.Chem as Chem
from rdkit.Chem import AllChem
from rdkit.Chem.Fingerprints import FingerprintMols
#Fix the random seed
