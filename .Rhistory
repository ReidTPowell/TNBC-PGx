RNA_all_sort <- RNA_all[sorted_indices, ]
RNA_all_sort[1:10,]
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(RNA_all_sort[1:250,train_samples]),method = "euclidean"),method = "complete")
#clus = cutree(hc,k=K)
# df_anno_clust = cbind(df_anno,clus)
# chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
# table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
row_dend = color_branches(row_dend, k = K)
HM = Heatmap(CCL_corr,
name = "Pearson",
#cluster_rows = FALSE,
#cluster_columns = FALSE,
cluster_rows = row_dend,
cluster_columns = row_dend,
top_annotation = anno_gen(df_anno),
show_row_names = FALSE)
HM
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv")
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_all[sorted_indices, ]
RNA_all_sort[1:10,]
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(RNA_all_sort[1:250,train_samples]),method = "euclidean"),method = "complete")
#clus = cutree(hc,k=K)
# df_anno_clust = cbind(df_anno,clus)
# chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
# table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
row_dend = color_branches(row_dend, k = K)
HM = Heatmap(CCL_corr,
name = "Pearson",
#cluster_rows = FALSE,
#cluster_columns = FALSE,
cluster_rows = row_dend,
cluster_columns = row_dend,
top_annotation = anno_gen(df_anno),
show_row_names = FALSE)
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv")
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_all[sorted_indices, ]
RNA_all_sort[1:10,]
View(RNA_alt)
is.na(RNA_alt)
which(is.na(RNA_alt))
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(RNA_all_sort[1:250,train_samples]),method = "euclidean"),method = "complete")
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(RNA_all_sort[1:250,train_samples]),method = "euclidean"),method = "complete")
#clus = cutree(hc,k=K)
# df_anno_clust = cbind(df_anno,clus)
# chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
# table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
row_dend = color_branches(row_dend, k = K)
HM = Heatmap(CCL_corr,
name = "Pearson",
#cluster_rows = FALSE,
#cluster_columns = FALSE,
#cluster_rows = row_dend,
#cluster_columns = row_dend,
top_annotation = anno_gen(df_anno),
show_row_names = FALSE)
RNA_alt = na.omit(read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv"))
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_all[sorted_indices, ]
RNA_all_sort[1:10,]
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv")
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_alt[sorted_indices, ]
RNA_all_sort[1:10,]
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv",row.names=1)
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv",row.names=1)
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_alt[sorted_indices, ]
RNA_all_sort[1:10,]
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(RNA_all_sort[1:250,train_samples]),method = "euclidean"),method = "complete")
#clus = cutree(hc,k=K)
# df_anno_clust = cbind(df_anno,clus)
# chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
# table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
row_dend = color_branches(row_dend, k = K)
HM = Heatmap(CCL_corr,
name = "Pearson",
#cluster_rows = FALSE,
#cluster_columns = FALSE,
cluster_rows = row_dend,
cluster_columns = row_dend,
top_annotation = anno_gen(df_anno),
show_row_names = FALSE)
HM
library("edgeR")
library("plotly")
metadata = Meta_all[train_samples,]
metadata[] <- lapply(metadata, factor)
design = model.matrix(~0+Time+PiD,metadata)
DEG_fit = lmFit(RNA_alt[,train_samples],design)
cm = makeContrasts(Mid_v_Pre=TimeMID-TimePRE,levels=design)
DEG_fit_cm = contrasts.fit(DEG_fit,cm)
DEG_fit_cm_eBayesfit = eBayes(DEG_fit_cm,trend = FALSE,robust = FALSE)
DEG_top = topTable(DEG_fit_cm_eBayesfit,adjust.method="fdr", number=Inf)
# DEG_fit_cm_eBayesfit = eBayes(DEG_fit,trend = FALSE,robust = FALSE)
# DEG_top = topTable(DEG_fit_cm_eBayesfit, coef = "TimePRE",adjust.method="fdr", number=Inf)
DEG_top
write.csv(DEG_top,"./Reports/RNA220304_DEG_LmPiD_RNAz_PDXmid_v_PDXpre.csv")
thresh_Pval = 0.05
thresh_FC = 0
tmp = DEG_top[intersect(which(DEG_top$P.Value <= thresh_Pval),which(abs(DEG_top$logFC) >= thresh_FC)),]
up = as.integer(length(which(tmp$logFC > 0)))
down =  as.integer(length(which(tmp$logFC <= 0)))
print(paste("Total DEG: ", up+down))
print(paste("Sigificantly up-reglated genes: ", up))
print(paste("Sigificantly down-reglated genes: ", down))
rm("tmp","up","down")
#Volcano plot of DEG
fig <- plot_ly(data = DEG_top, x = ~logFC, y = ~-1*log10(P.Value),color = ~logFC, colors="RdBu")%>%
layout(xaxis = list(title = "DeltaZ", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(DEG_top))
plotly::export(p=fig,file = "Reports/RNA220304_DEG_LmPiD_RNAz_PDXmid_v_PDXpre.png")
fig
RNA_alt_z = t(scale(t(RNA_alt),scale=T,center = T))
library("edgeR")
library("plotly")
RNA_alt_z = t(scale(t(RNA_alt),scale=T,center = T))
metadata = Meta_all[train_samples,]
metadata[] <- lapply(metadata, factor)
design = model.matrix(~0+Time+PiD,metadata)
DEG_fit = lmFit(RNA_alt_z[,train_samples],design)
cm = makeContrasts(Mid_v_Pre=TimeMID-TimePRE,levels=design)
DEG_fit_cm = contrasts.fit(DEG_fit,cm)
DEG_fit_cm_eBayesfit = eBayes(DEG_fit_cm,trend = FALSE,robust = FALSE)
DEG_top = topTable(DEG_fit_cm_eBayesfit,adjust.method="fdr", number=Inf)
# DEG_fit_cm_eBayesfit = eBayes(DEG_fit,trend = FALSE,robust = FALSE)
# DEG_top = topTable(DEG_fit_cm_eBayesfit, coef = "TimePRE",adjust.method="fdr", number=Inf)
DEG_top
write.csv(DEG_top,"./Reports/RNA220304_DEG_LmPiD_RNAz_PDXmid_v_PDXpre.csv")
thresh_Pval = 0.05
thresh_FC = 0
tmp = DEG_top[intersect(which(DEG_top$P.Value <= thresh_Pval),which(abs(DEG_top$logFC) >= thresh_FC)),]
up = as.integer(length(which(tmp$logFC > 0)))
down =  as.integer(length(which(tmp$logFC <= 0)))
print(paste("Total DEG: ", up+down))
print(paste("Sigificantly up-reglated genes: ", up))
print(paste("Sigificantly down-reglated genes: ", down))
rm("tmp","up","down")
#Volcano plot of DEG
fig <- plot_ly(data = DEG_top, x = ~logFC, y = ~-1*log10(P.Value),color = ~logFC, colors="RdBu")%>%
layout(xaxis = list(title = "DeltaZ", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(DEG_top))
plotly::export(p=fig,file = "Reports/RNA220304_DEG_LmPiD_RNAz_PDXmid_v_PDXpre.png")
fig
library("pathfindR")
install.packages("pathfindR")
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv",row.names=1)
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_alt[sorted_indices, ]
RNA_all_sort[1:10,]
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv",row.names=1)
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_alt[sorted_indices, ]
RNA_all_sort[1:10,]
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(RNA_all_sort[1:250,train_samples]),method = "euclidean"),method = "complete")
#clus = cutree(hc,k=K)
# df_anno_clust = cbind(df_anno,clus)
# chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
# table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
row_dend = color_branches(row_dend, k = K)
rm(list=ls())
library("glmnet")
library("doMC")
library("reticulate")
library("plotly")
library("matrixStats")
library("ComplexHeatmap")
library("seriation")
library("dplyr")
library("glmnet")
library("Hmisc")
vline <- function(x = 0, color = "black") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color, dash="dot"))
}
hline <- function(y = 0, color = "black") {
list(
type = "line",
x0 = 0,
x1 = 1,
xref = "paper",
y0 = y,
y1 = y,
line = list(color = color, dash="dot"))
}
anno_gen = function(df){
library(ComplexHeatmap)
hm_anno = HeatmapAnnotation(df = as.data.frame(df_anno),
annotation_name_side = "left",
col=list(
Time=c("PRE"="grey80",
"MID"="grey40",
"POST"="grey0"
),
PiD =c("TNBC117"="yellow3",
"TNBC231"="wheat3",
"TNBC249"="violetred3",
"TNBC283"="turquoise3",
"TNBC010"="tomato3",
"TNBC139"="thistle3",
"TNBC047"="tan3",
"TNBC271"="steelblue3",
"ATID099"="springgreen3",
"ATID608"="snow3"
)
)
)
return(hm_anno)
}
pathfindR_visNetwork = function(pfr_tmp,flnm="visNetwork.html"){
ID_column <- "Term_Description"
edges <- data.frame()
all_up = c()
all_down = c()
for (i in base::seq_len(nrow(pfr_tmp))) {
up_genes <- unlist(strsplit(pfr_tmp$Up_regulated[i],", "))
all_up = unique(c(all_up,up_genes))
down_genes <- unlist(strsplit(pfr_tmp$Down_regulated[i],", "))
all_down = unique(c(all_down,down_genes))
genes <- c(up_genes, down_genes)
for (gene in genes) {
edges <- rbind(edges, data.frame(Term = pfr_tmp[i, ID_column], Gene = gene))
}
}
pathways = as.data.frame(unique(edges$Term))
colnames(pathways) = "id"
pathways[,"color"] = "grey"
pathways[,"group"] = "Pathway"
pathways[,"shape"] = "square"
pathways[,"font.size"] = 30
all_up = as.data.frame(all_up)
colnames(all_up) = "id"
all_up[,"color"] = "green"
all_up[,"group"] = "Up_regulated"
all_up[,"shape"] = "circle"
all_up[,"font.size"] = 20
all_down = as.data.frame(all_down)
colnames(all_down) = "id"
all_down[,"color"] = "darkred"
all_down[,"group"] = "Down_regulated"
all_down[,"shape"] = "circle"
all_down[,"font.size"] = 20
nodes = rbind(pathways,all_up,all_down)
colnames(edges) = c("from","to")
rm("pathways","all_up","all_down")
graph = visNetwork(nodes, edges,width='100%',height=2000)%>%
visPhysics(stabilization = list(iterations=500))%>%
visNodes(color = list(inherit=FALSE), font = list(size = 30))%>%
visEdges(color = list(inherit=FALSE, font = list(size = 40)))%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T)) %>%
visInteraction(multiselect = TRUE) %>%
visLayout(randomSeed = 123)%>%
visGroups(groupname = "Pathway", color = "grey") %>%
visGroups(groupname = "Up_regulated", color = "green") %>%
visGroups(groupname = "Down_regulated", color = "darkred") %>%
visLegend(position = "right")
visSave(graph, file=flnm, selfcontained = TRUE, background = "white")
}
hsa_preview = function(pfr_results, input_df_tmp ,outdir="./hsa_preview"){
pathview_in = input_df_tmp %>% dplyr::select("logFC")
for(i in 1:nrow(pfr_results)){
tryCatch({
mypathway<-pfr_results$ID[i]
Pathway_name = pfr_results$Term_Description[i]
dir.create(file.path(outdir, Pathway_name), showWarnings = FALSE,recursive = TRUE)
setwd(file.path(outdir, Pathway_name))
library(pathview)
pathview(gene.data=pathview_in,
species="hsa",
pathway=mypathway,gene.idtype = "SYMBOL",
low = list(gene = "red", cpd = "blue"),
mid = list(gene = "gray", cpd = "gray"),
high = list(gene = "green", cpd = "yellow"))},error=function(e){})
}
}
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv",row.names=1)
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
library("readxl")
library("dplyr")
#library("xlsx")
library("dplyr")
Base_dir = "D:\\Users\\rpowell\\Documents\\GitHub\\TNBC-PGx"
knitr::opts_knit$set(root.dir = Base_dir)
setwd(Base_dir)
#DNA_all <- read.xlsx2("data/TNBC_oncoprint_binary.xlsx",sheetIndex = 1,row.names = 1)
RNA_all <- read.csv("./data/RNAseq_COMBAT.csv",row.names=1)
ssGSEA_all <- read.csv("./data/RNAseq_COMBAT_ssGSEA.csv",row.names=1)
Drug_all <- read.csv("./data/Drug_AUC.csv",row.names=1)
Drug_meta <- read.csv("./data/Drug_metadata.csv",row.names=1)
Meta_all <- read_excel("./data/PDX_metadata.xlsx")
PPI = "./data/STRING.csv"
row.names(Meta_all) = Meta_all$PDX_ID
pairsOnly = T
cellLine_drug = colnames(Drug_all)
drugnames = row.names(Drug_all)
cellLine_RNA = colnames(RNA_all)
#genenames = row.names(RNA_filtered_RWR)
all_samples = intersect(cellLine_drug,cellLine_RNA)
Pairs = Meta_all %>% dplyr::count(PiD)
Pairs = Pairs[which(Pairs$n >= 2),]
Meta_pairsOnly = Meta_all[which(Meta_all$PiD %in% Pairs$PiD),]
row.names(Meta_pairsOnly) = Meta_pairsOnly$PDX_ID
if (pairsOnly){
train_samples = intersect(all_samples,Meta_pairsOnly$PDX_ID)
} else{train_samples = all_samples}
train_samples
tmp = setdiff(colnames(RNA_all),train_samples)
test_samples = intersect(colnames(Drug_all),tmp)
unknown_samples = setdiff(tmp,colnames(Drug_all))
with_held_RNA = RNA_all[,test_samples]
with_held_Drug = Drug_all[,test_samples]
with_held_common = intersect(colnames(with_held_RNA),colnames(with_held_Drug))
with_held_RNA = with_held_RNA[,with_held_common]
with_held_Drug = with_held_Drug[,with_held_common]
rm("tmp","Pairs")
library("matrixStats")
RNA_means = rowMeans(as.matrix(RNA_all))
RNA_stdDev = rowSds(as.matrix(RNA_all))
plot(RNA_means,RNA_stdDev)
RNA_filter = which(RNA_means >= .5)
RNA_filtered = RNA_all[RNA_filter,]
RNA_filtered_z = t(scale(t(RNA_filtered), center = T, scale = T))
library("RColorBrewer")
nsamples <- ncol(RNA_filtered)
col <- brewer.pal(nsamples, "Paired")
par(mfrow=c(1,2))
plot(density(as.matrix(RNA_filtered[,1])), col=col[1], lwd=2, ylim=c(0,1), las=2, main="", xlab="")
title(main="Filtered data", xlab="RNAseq")
#abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(as.matrix(RNA_filtered[,i]))
lines(den$x, den$y, col=col[i], lwd=2)
}
boxplot(RNA_filtered[,], las=2, col=col, main="")
title(main="Filtered data",ylab="RNAseq")
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv",row.names=1)
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_alt[sorted_indices, ]
RNA_all_sort[1:10,]
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(RNA_all_sort[1:250,train_samples]),method = "euclidean"),method = "complete")
#clus = cutree(hc,k=K)
# df_anno_clust = cbind(df_anno,clus)
# chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
# table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
row_dend = color_branches(row_dend, k = K)
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv",row.names=1)
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_alt[sorted_indices, ]
RNA_all_sort[1:10,]
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(RNA_all_sort[1:250,train_samples]),method = "euclidean"),method = "complete")
#clus = cutree(hc,k=K)
# df_anno_clust = cbind(df_anno,clus)
# chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
# table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
#row_dend = color_branches(row_dend, k = K)
HM = Heatmap(CCL_corr,
name = "Pearson",
#cluster_rows = FALSE,
#cluster_columns = FALSE,
cluster_rows = row_dend,
cluster_columns = row_dend,
top_annotation = anno_gen(df_anno),
show_row_names = FALSE)
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv",row.names=1)
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_alt[sorted_indices, ]
RNA_all_sort[1:10,]
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(RNA_all_sort[1:250,train_samples]),method = "euclidean"),method = "complete")
#clus = cutree(hc,k=K)
# df_anno_clust = cbind(df_anno,clus)
# chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
# table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
#row_dend = color_branches(row_dend, k = K)
HM = Heatmap(CCL_corr,
name = "Pearson",
#cluster_rows = FALSE,
#cluster_columns = FALSE,
cluster_rows = row_dend,
cluster_columns = row_dend,
top_annotation = anno_gen(CCL_corr),
show_row_names = FALSE)
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv",row.names=1)
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_alt[sorted_indices, ]
RNA_all_sort[1:10,]
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(RNA_all_sort[1:250,train_samples]),method = "euclidean"),method = "complete")
df_anno = Meta_all[train_samples,]%>%select("Time","PiD")
#clus = cutree(hc,k=K)
# df_anno_clust = cbind(df_anno,clus)
# chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
# table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
#row_dend = color_branches(row_dend, k = K)
HM = Heatmap(CCL_corr,
name = "Pearson",
#cluster_rows = FALSE,
#cluster_columns = FALSE,
cluster_rows = row_dend,
cluster_columns = row_dend,
top_annotation = anno_gen(df_anno),
show_row_names = FALSE)
HM
RNA_alt = read.csv("Q:\\MDA_Helen PiwnicaWorms\\4) Metadata\\220304_pdx_rnaseq\\RNA_combat.220304.csv",row.names=1)
##Sort by decreasing variance
row_variances <- apply(RNA_alt[,train_samples], 1, var)
sorted_indices <- order(row_variances,decreasing = T)
RNA_all_sort <- RNA_alt[sorted_indices, ]
RNA_all_sort[1:10,]
CCL_corr = cor(as.matrix(RNA_all_sort[1:250,train_samples]),method = c("pearson"))
hc = hclust(dist(t(CCL_corr),method = "euclidean"),method = "complete")
df_anno = Meta_all[train_samples,]%>%select("Time","PiD")
#clus = cutree(hc,k=K)
# df_anno_clust = cbind(df_anno,clus)
# chisq.test(df_anno_clust$PiD, df_anno_clust$clus, correct=FALSE)
# table(df_anno_clust$PiD, df_anno_clust$clus)
row_dend = as.dendrogram(hc)
#row_dend = color_branches(row_dend, k = K)
HM = Heatmap(CCL_corr,
name = "Pearson",
#cluster_rows = FALSE,
#cluster_columns = FALSE,
cluster_rows = row_dend,
cluster_columns = row_dend,
top_annotation = anno_gen(df_anno),
show_row_names = FALSE)
HM
library("edgeR")
library("plotly")
RNA_alt_z = t(scale(t(RNA_alt),scale=T,center = T))
metadata = Meta_all[train_samples,]
metadata[] <- lapply(metadata, factor)
design = model.matrix(~0+Time+PiD,metadata)
DEG_fit = lmFit(RNA_alt_z[,train_samples],design)
cm = makeContrasts(Mid_v_Pre=TimeMID-TimePRE,levels=design)
DEG_fit_cm = contrasts.fit(DEG_fit,cm)
DEG_fit_cm_eBayesfit = eBayes(DEG_fit_cm,trend = FALSE,robust = FALSE)
DEG_top = topTable(DEG_fit_cm_eBayesfit,adjust.method="fdr", number=Inf)
# DEG_fit_cm_eBayesfit = eBayes(DEG_fit,trend = FALSE,robust = FALSE)
# DEG_top = topTable(DEG_fit_cm_eBayesfit, coef = "TimePRE",adjust.method="fdr", number=Inf)
DEG_top
write.csv(DEG_top,"./Reports/RNA220304_DEG_LmPiD_RNAz_PDXmid_v_PDXpre.csv")
thresh_Pval = 0.05
thresh_FC = 0
tmp = DEG_top[intersect(which(DEG_top$P.Value <= thresh_Pval),which(abs(DEG_top$logFC) >= thresh_FC)),]
up = as.integer(length(which(tmp$logFC > 0)))
down =  as.integer(length(which(tmp$logFC <= 0)))
print(paste("Total DEG: ", up+down))
print(paste("Sigificantly up-reglated genes: ", up))
print(paste("Sigificantly down-reglated genes: ", down))
rm("tmp","up","down")
#Volcano plot of DEG
fig <- plot_ly(data = DEG_top, x = ~logFC, y = ~-1*log10(P.Value),color = ~logFC, colors="RdBu")%>%
layout(xaxis = list(title = "DeltaZ", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(DEG_top))
plotly::export(p=fig,file = "Reports/RNA220304_DEG_LmPiD_RNAz_PDXmid_v_PDXpre.png")
fig
library("pathfindR")
install.packages("pathfindR")
