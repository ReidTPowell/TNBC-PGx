library(pathview)
pathview(gene.data=pathview_in,
species="hsa",
pathway=mypathway,gene.idtype = "SYMBOL",
low = list(gene = "red", cpd = "blue"),
mid = list(gene = "gray", cpd = "gray"),
high = list(gene = "green", cpd = "yellow"))},error=function(e){})
}
}
hsa_preview(pfr_tmp[1:25,],tmp[which(tmp$P_value<=0.05),],outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
hsa_preview = function(pfr_results, input_df_tmp ,outdir="./hsa_preview"){
pathview_in = input_df_tmp %>% dplyr::select("LogFC")
for(i in 1:nrow(pfr_results)){
tryCatch({
mypathway<-pfr_results$ID[i]
Pathway_name = pfr_results$Term_Description[i]
dir.create(file.path(outdir, Pathway_name), showWarnings = FALSE,recursive = TRUE)
setwd(file.path(outdir, Pathway_name))
library(pathview)
pathview(gene.data=pathview_in,
species="hsa",
pathway=mypathway,gene.idtype = "SYMBOL",
low = list(gene = "red", cpd = "blue"),
mid = list(gene = "gray", cpd = "gray"),
high = list(gene = "green", cpd = "yellow"))},error=function(e){})
}
}
hsa_preview(pfr_tmp,tmp[which(tmp$P_value<=0.05),],outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
tmp
#Volcano plot of DEG
fig <- plot_ly(data = tmp, x = ~logFC, y = ~-1*log10(P.Value),color = ~logFC, colors="RdBu")%>%
layout(xaxis = list(title = "Correlation", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(tmp))
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz.png")
#Volcano plot of DEG
fig <- plot_ly(data = tmp, x = ~LogFC, y = ~-1*log10(P_value),color = ~LogFC, colors="RdBu")%>%
layout(xaxis = list(title = "Correlation", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(vline(-1*thresh_FC),vline(thresh_FC),hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(tmp))
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz.png")
fig
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot"),
yaxis = list(title = "", categoryorder = "total ascending"),
legend = list(title=list(text='p_value')))
plot_DGE
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", categoryorder = "total ascending", tickfont = list(size = 20),titlefont = list(size = 24)),
legend = list(title=list(text='p_value')))
plot_DGE
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
thresh_FC = 0
#Volcano plot of DEG
fig <- plot_ly(data = tmp, x = ~LogFC, y = ~-1*log10(P_value),color = ~LogFC, colors="RdBu")%>%
layout(xaxis = list(title = "Correlation", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(tmp))
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz.png")
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", categoryorder = "total ascending", tickfont = list(size = 20),titlefont = list(size = 24)),
legend = list(title=list(text='p_value')))
plot_DGE
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
plotly::export(p=plot_DGE,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_enrichment.png")
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot", tickfont = list(size = 40),titlefont = list(size = 45)),
yaxis = list(title = "", categoryorder = "total ascending", tickfont = list(size = 40),titlefont = list(size = 45)),
legend = list(title=list(text='p_value')))
plot_DGE
plotly::export(p=plot_DGE,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_enrichment.png")
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", categoryorder = "total ascending", tickfont = list(size = 20),titlefont = list(size = 24)),
legend = list(title=list(text='p_value')))
plot_DGE
plotly::export(p=plot_DGE,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_enrichment.png")
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot", tickfont = list(size = 30),titlefont = list(size = 35)),
yaxis = list(title = "", categoryorder = "total ascending", tickfont = list(size = 30),titlefont = list(size = 35)),
legend = list(title=list(text='p_value')))
plot_DGE
plotly::export(p=plot_DGE,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_enrichment.png")
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
InVivo_idx = which(!is.na(Meta_all$InVivo_PEV))
InVivo_list = Meta_all[InVivo_idx,"InVivo_PEV"]
InVivo_models = Meta_all[InVivo_idx,"PDX_ID"]
tmp = X_all[unlist(as.matrix(InVivo_models)),]
tmp = cbind(InVivo_list,tmp)
tmp = apply(tmp[, -1], 2, function(x) {cor.test(tmp[, 1], x, method = "pearson", use = "pairwise")})
p.vals <- as.matrix(unlist(sapply(tmp, "[[", "p.value")))
r.vals <- as.matrix(unlist(sapply(tmp, "[[", "estimate")))
tmp = as.data.frame(cbind(colnames(X_all),
r_val = r.vals,
p_val = p.vals))
colnames(tmp) = c("gene_symbol","pearson","P_value")
rownames(tmp) <- NULL
tmp$pearson = as.numeric(tmp$pearson)
tmp$P_value = as.numeric(tmp$P_value)
#Volcano plot of DEG
fig <- plot_ly(data = tmp, x = ~LogFC, y = ~-1*log10(P_value),color = ~LogFC, colors="RdBu")%>%
layout(xaxis = list(title = "Correlation", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(tmp))
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz.png")
library("pathfindR")
library("stringr")
library("dplyr")
InVivo_idx = which(!is.na(Meta_all$InVivo_PEV))
InVivo_list = Meta_all[InVivo_idx,"InVivo_PEV"]
InVivo_models = Meta_all[InVivo_idx,"PDX_ID"]
tmp = X_all[unlist(as.matrix(InVivo_models)),]
tmp = cbind(InVivo_list,tmp)
tmp = apply(tmp[, -1], 2, function(x) {cor.test(tmp[, 1], x, method = "pearson", use = "pairwise")})
p.vals <- as.matrix(unlist(sapply(tmp, "[[", "p.value")))
r.vals <- as.matrix(unlist(sapply(tmp, "[[", "estimate")))
tmp = as.data.frame(cbind(colnames(X_all),
r_val = r.vals,
p_val = p.vals))
colnames(tmp) = c("gene_symbol","pearson","P_value")
rownames(tmp) <- NULL
tmp$pearson = as.numeric(tmp$pearson)
tmp$P_value = as.numeric(tmp$P_value)
#Volcano plot of DEG
fig <- plot_ly(data = tmp, x = ~pearson, y = ~-1*log10(P_value),color = ~pearson, colors="RdBu")%>%
layout(xaxis = list(title = "Correlation", tickfont = list(size = 40),titlefont = list(size = 60)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 40),titlefont = list(size = 60)),
shapes=list(hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(tmp))
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz.png")
fig
# write.csv(tmp, file="Reports/Cor_pearson_TC_RNAz.csv")
#
# name = "Reports/Cor_pearson_TC_RNAz_pathfindR_2"
#
# #Delete old
# unlink(name, recursive = TRUE)
#
# pfr_tmp <- run_pathfindR(tmp,
#                                iterations = 10,
#                                p_val_threshold = 0.05,
#                                search_method = "GR",
#                                #gene_sets = "Reactome",
#                                #pin_name_path = "STRING",
#                                plot_enrichment_chart = FALSE,
#                                visualize_enriched_terms = FALSE,
#                                output_dir = name,
#                                silent_option = FALSE)
#
# pfr_tmp <- pfr_tmp[order(pfr_tmp$lowest_p, decreasing = FALSE), ]
# assign(paste("pfr_",name,sep=""),pfr_tmp)
#
# rownames(tmp) <- tmp$gene_symbol
# colnames(tmp) = c("gene_symbol","LogFC","P_value")
#
# pathfindR_visNetwork(pfr_tmp,paste(name,"visNetwork.html",sep="/"))
# hsa_preview(pfr_tmp,tmp[which(tmp$P_value<=0.05),],outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
#rm("pfr_tmp")
library("pathfindR")
library("stringr")
library("dplyr")
InVivo_idx = which(!is.na(Meta_all$InVivo_PEV))
InVivo_list = Meta_all[InVivo_idx,"InVivo_PEV"]
InVivo_models = Meta_all[InVivo_idx,"PDX_ID"]
tmp = X_all[unlist(as.matrix(InVivo_models)),]
tmp = cbind(InVivo_list,tmp)
tmp = apply(tmp[, -1], 2, function(x) {cor.test(tmp[, 1], x, method = "pearson", use = "pairwise")})
p.vals <- as.matrix(unlist(sapply(tmp, "[[", "p.value")))
r.vals <- as.matrix(unlist(sapply(tmp, "[[", "estimate")))
tmp = as.data.frame(cbind(colnames(X_all),
r_val = r.vals,
p_val = p.vals))
colnames(tmp) = c("gene_symbol","pearson","P_value")
rownames(tmp) <- NULL
tmp$pearson = as.numeric(tmp$pearson)
tmp$P_value = as.numeric(tmp$P_value)
#Volcano plot of DEG
fig <- plot_ly(data = tmp, x = ~pearson, y = ~-1*log10(P_value),color = ~pearson, colors="RdBu")%>%
layout(xaxis = list(title = "Correlation", tickfont = list(size = 30),titlefont = list(size = 35)),
yaxis = list(title = "-log(p-value)", tickfont = list(size = 30),titlefont = list(size = 35)),
shapes=list(hline(-log10(thresh_Pval)))) %>%
add_trace(text=row.names(tmp))
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz.png")
fig
# write.csv(tmp, file="Reports/Cor_pearson_TC_RNAz.csv")
#
# name = "Reports/Cor_pearson_TC_RNAz_pathfindR_2"
#
# #Delete old
# unlink(name, recursive = TRUE)
#
# pfr_tmp <- run_pathfindR(tmp,
#                                iterations = 10,
#                                p_val_threshold = 0.05,
#                                search_method = "GR",
#                                #gene_sets = "Reactome",
#                                #pin_name_path = "STRING",
#                                plot_enrichment_chart = FALSE,
#                                visualize_enriched_terms = FALSE,
#                                output_dir = name,
#                                silent_option = FALSE)
#
# pfr_tmp <- pfr_tmp[order(pfr_tmp$lowest_p, decreasing = FALSE), ]
# assign(paste("pfr_",name,sep=""),pfr_tmp)
#
# rownames(tmp) <- tmp$gene_symbol
# colnames(tmp) = c("gene_symbol","LogFC","P_value")
#
# pathfindR_visNetwork(pfr_tmp,paste(name,"visNetwork.html",sep="/"))
# hsa_preview(pfr_tmp,tmp[which(tmp$P_value<=0.05),],outdir = paste(Base_dir,name,"hsa_preview",sep="/"))
#rm("pfr_tmp")
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot", tickfont = list(size = 30),titlefont = list(size = 35)),
yaxis = list(title = "", categoryorder = "total ascending", tickfont = list(size = 30),titlefont = list(size = 35)),
legend = list(title=list(text='p_value')))
plot_DGE
plotly::export(p=plot_DGE,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_enrichment.png")
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot", tickfont = list(size = 30),titlefont = list(size = 35)),
yaxis = list(title = "", categoryorder = "total ascending", tickfont = list(size = 30),titlefont = list(size = 35)),
width = 500, height = 500,
legend = list(title=list(text='p_value'), tickfont = list(size = 30),titlefont = list(size = 35))
)
plot_DGE
plotly::export(p=plot_DGE,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_enrichment.png")
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot", tickfont = list(size = 30),titlefont = list(size = 35)),
yaxis = list(title = "", categoryorder = "total ascending", tickfont = list(size = 30),titlefont = list(size = 35)),
width = 1600, height = 800,
legend = list(title=list(text='p_value'), tickfont = list(size = 30),titlefont = list(size = 35))
)
plot_DGE
plotly::export(p=plot_DGE,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_enrichment.png")
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot", tickfont = list(size = 30),titlefont = list(size = 35)),
yaxis = list(title = "", categoryorder = "total ascending", tickfont = list(size = 30),titlefont = list(size = 35)),
width = 1600, height = 800,
legend = list(title=list(text='p_value'), font = list(size = 30))
)
plot_DGE
plotly::export(p=plot_DGE,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_enrichment.png")
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
library(plotly)
tmp = `pfr_Reports/Cor_pearson_TC_RNAz_pathfindR`[order(pfr_tmp$lowest_p,decreasing = F),]
tmp = tmp[1:10,]
#Volcano plot of DEG
plot_DGE <- plot_ly(data = tmp,x = ~Fold_Enrichment, y = ~Term_Description, color = ~-log10(lowest_p), colors="Blues", size = ~occurrence, type = "scatter", marker=list(line=list(color="black")))%>%
layout(xaxis = list(title = "Enrichment plot", tickfont = list(size = 30),titlefont = list(size = 35)),
yaxis = list(title = "", categoryorder = "total ascending", tickfont = list(size = 30),titlefont = list(size = 35)),
width = 1600, height = 800,
legend = list(title=list(text='p_value'), font = list(size = 30)),
legend_title = list(font = list(size = 30))
)
plot_DGE
plotly::export(p=plot_DGE,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_enrichment.png")
df = data.frame()
for (i in 1:nrow(tmp)){
df[i,"Term"] = tmp$Term_Description [i]
df[i,"up_reglated"] = length(unlist(str_split(tmp$Up_regulated[i],",")))
df[i,"down_reglated"] = length(unlist(str_split(tmp$Down_regulated[i],",")))
}
df$down_reglated = -1*df$down_reglated
df.long <- df[1:10,] %>% pivot_longer(-Term, names_to = "variable", values_to = "value")
fig = df.long %>% plot_ly(x= ~value, y=~Term, color=~variable) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(title = "N Genes", tickfont = list(size = 20),titlefont = list(size = 24)),
yaxis = list(title = "", tickfont = list(size = 20),titlefont = list(size = 24))
)
fig
plotly::export(p=fig,file = "Reports/Cor_pearson_TC_RNAz_pathfindR_gene_counts.png")
sel = c("PIM137","PIM172",
"PIM025","PIM038",
"PIM190","PIM231",
"PIM254","PIM311")
PEV_ = c("RESP","NON",
"NON","NON",
"NON","NON",
"RESP","RESP")
library(dplyr)
library(tidyr)
library(rstatix)
genes = pathways[["REACTOME_NEDDYLATION"]]
genes = intersect(genes,row.names(RNA_filtered_z))
df = as.data.frame(t(rbind(Gx =PEV_,RNA_filtered_z[genes,sel])))
df.long <- df %>% pivot_longer(-Gx, names_to = "genes", values_to = "value")
df.long$Gx = as.factor(df.long$Gx)
df.long$value = as.numeric(df.long$value)
stat.test <- df.long %>%
group_by(genes) %>%
t_test(value ~ Gx,detailed =TRUE) %>%
adjust_pvalue(method = "BH") %>%
add_significance()
stat.test[,c("genes","estimate","p","p.adj")]
write.csv(stat.test[,c("genes","estimate","p","p.adj")],file="Reports/Ttest_Resp2Non_RNAz.png")
write.csv(stat.test[,c("genes","estimate","p","p.adj")],file="Reports/Ttest_Resp2Non_RNAz.csv")
sel = c("PIM137","PIM172",
"PIM025","PIM038",
"PIM190","PIM231",
"PIM254","PIM311")
PEV_ = c("RESP","NON",
"NON","NON",
"NON","NON",
"RESP","RESP")
library(dplyr)
library(tidyr)
library(rstatix)
genes = pathways[["REACTOME_NEDDYLATION"]]
genes = intersect(genes,row.names(RNA_filtered_z))
df = as.data.frame(t(rbind(Gx =PEV_,RNA_filtered_z[,sel])))
df.long <- df %>% pivot_longer(-Gx, names_to = "genes", values_to = "value")
df.long$Gx = as.factor(df.long$Gx)
df.long$value = as.numeric(df.long$value)
stat.test <- df.long %>%
group_by(genes) %>%
t_test(value ~ Gx,detailed =TRUE) %>%
adjust_pvalue(method = "BH") %>%
add_significance()
stat.test[,c("genes","estimate","p","p.adj")]
write.csv(stat.test[,c("genes","estimate","p","p.adj")],file="Reports/Ttest_Resp2Non_RNAz.csv")
write.csv(stat.test[,c("genes","estimate","p","p.adj")],file="Reports/Ttest_Resp2Non_RNAz.csv")
